// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/config.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace EmailCore.Communicators {
  public static partial class Config
  {
    static readonly string __ServiceName = "config.Config";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::EmailCore.Communicators.ARequest> __Marshaller_config_ARequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::EmailCore.Communicators.ARequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::EmailCore.Communicators.AReply> __Marshaller_config_AReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::EmailCore.Communicators.AReply.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::EmailCore.Communicators.IpRequest> __Marshaller_config_IpRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::EmailCore.Communicators.IpRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::EmailCore.Communicators.IpReply> __Marshaller_config_IpReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::EmailCore.Communicators.IpReply.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::EmailCore.Communicators.DbRequest> __Marshaller_config_DbRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::EmailCore.Communicators.DbRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::EmailCore.Communicators.DbReply> __Marshaller_config_DbReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::EmailCore.Communicators.DbReply.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::EmailCore.Communicators.VkRequest> __Marshaller_config_VkRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::EmailCore.Communicators.VkRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::EmailCore.Communicators.VkReply> __Marshaller_config_VkReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::EmailCore.Communicators.VkReply.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::EmailCore.Communicators.EmailRequest> __Marshaller_config_EmailRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::EmailCore.Communicators.EmailRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::EmailCore.Communicators.EmailReply> __Marshaller_config_EmailReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::EmailCore.Communicators.EmailReply.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::EmailCore.Communicators.ARequest, global::EmailCore.Communicators.AReply> __Method_GetAuth = new grpc::Method<global::EmailCore.Communicators.ARequest, global::EmailCore.Communicators.AReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAuth",
        __Marshaller_config_ARequest,
        __Marshaller_config_AReply);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::EmailCore.Communicators.IpRequest, global::EmailCore.Communicators.IpReply> __Method_GetIp = new grpc::Method<global::EmailCore.Communicators.IpRequest, global::EmailCore.Communicators.IpReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetIp",
        __Marshaller_config_IpRequest,
        __Marshaller_config_IpReply);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::EmailCore.Communicators.DbRequest, global::EmailCore.Communicators.DbReply> __Method_GetDb = new grpc::Method<global::EmailCore.Communicators.DbRequest, global::EmailCore.Communicators.DbReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetDb",
        __Marshaller_config_DbRequest,
        __Marshaller_config_DbReply);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::EmailCore.Communicators.VkRequest, global::EmailCore.Communicators.VkReply> __Method_GetVk = new grpc::Method<global::EmailCore.Communicators.VkRequest, global::EmailCore.Communicators.VkReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetVk",
        __Marshaller_config_VkRequest,
        __Marshaller_config_VkReply);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::EmailCore.Communicators.EmailRequest, global::EmailCore.Communicators.EmailReply> __Method_GetEmail = new grpc::Method<global::EmailCore.Communicators.EmailRequest, global::EmailCore.Communicators.EmailReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetEmail",
        __Marshaller_config_EmailRequest,
        __Marshaller_config_EmailReply);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::EmailCore.Communicators.ConfigReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Config</summary>
    [grpc::BindServiceMethod(typeof(Config), "BindService")]
    public abstract partial class ConfigBase
    {
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::EmailCore.Communicators.AReply> GetAuth(global::EmailCore.Communicators.ARequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::EmailCore.Communicators.IpReply> GetIp(global::EmailCore.Communicators.IpRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::EmailCore.Communicators.DbReply> GetDb(global::EmailCore.Communicators.DbRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::EmailCore.Communicators.VkReply> GetVk(global::EmailCore.Communicators.VkRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::EmailCore.Communicators.EmailReply> GetEmail(global::EmailCore.Communicators.EmailRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Config</summary>
    public partial class ConfigClient : grpc::ClientBase<ConfigClient>
    {
      /// <summary>Creates a new client for Config</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public ConfigClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Config that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public ConfigClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected ConfigClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected ConfigClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::EmailCore.Communicators.AReply GetAuth(global::EmailCore.Communicators.ARequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAuth(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::EmailCore.Communicators.AReply GetAuth(global::EmailCore.Communicators.ARequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAuth, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::EmailCore.Communicators.AReply> GetAuthAsync(global::EmailCore.Communicators.ARequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAuthAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::EmailCore.Communicators.AReply> GetAuthAsync(global::EmailCore.Communicators.ARequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAuth, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::EmailCore.Communicators.IpReply GetIp(global::EmailCore.Communicators.IpRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetIp(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::EmailCore.Communicators.IpReply GetIp(global::EmailCore.Communicators.IpRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetIp, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::EmailCore.Communicators.IpReply> GetIpAsync(global::EmailCore.Communicators.IpRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetIpAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::EmailCore.Communicators.IpReply> GetIpAsync(global::EmailCore.Communicators.IpRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetIp, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::EmailCore.Communicators.DbReply GetDb(global::EmailCore.Communicators.DbRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDb(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::EmailCore.Communicators.DbReply GetDb(global::EmailCore.Communicators.DbRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetDb, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::EmailCore.Communicators.DbReply> GetDbAsync(global::EmailCore.Communicators.DbRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDbAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::EmailCore.Communicators.DbReply> GetDbAsync(global::EmailCore.Communicators.DbRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetDb, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::EmailCore.Communicators.VkReply GetVk(global::EmailCore.Communicators.VkRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetVk(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::EmailCore.Communicators.VkReply GetVk(global::EmailCore.Communicators.VkRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetVk, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::EmailCore.Communicators.VkReply> GetVkAsync(global::EmailCore.Communicators.VkRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetVkAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::EmailCore.Communicators.VkReply> GetVkAsync(global::EmailCore.Communicators.VkRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetVk, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::EmailCore.Communicators.EmailReply GetEmail(global::EmailCore.Communicators.EmailRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetEmail(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::EmailCore.Communicators.EmailReply GetEmail(global::EmailCore.Communicators.EmailRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetEmail, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::EmailCore.Communicators.EmailReply> GetEmailAsync(global::EmailCore.Communicators.EmailRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetEmailAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::EmailCore.Communicators.EmailReply> GetEmailAsync(global::EmailCore.Communicators.EmailRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetEmail, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override ConfigClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ConfigClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(ConfigBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetAuth, serviceImpl.GetAuth)
          .AddMethod(__Method_GetIp, serviceImpl.GetIp)
          .AddMethod(__Method_GetDb, serviceImpl.GetDb)
          .AddMethod(__Method_GetVk, serviceImpl.GetVk)
          .AddMethod(__Method_GetEmail, serviceImpl.GetEmail).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, ConfigBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetAuth, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::EmailCore.Communicators.ARequest, global::EmailCore.Communicators.AReply>(serviceImpl.GetAuth));
      serviceBinder.AddMethod(__Method_GetIp, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::EmailCore.Communicators.IpRequest, global::EmailCore.Communicators.IpReply>(serviceImpl.GetIp));
      serviceBinder.AddMethod(__Method_GetDb, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::EmailCore.Communicators.DbRequest, global::EmailCore.Communicators.DbReply>(serviceImpl.GetDb));
      serviceBinder.AddMethod(__Method_GetVk, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::EmailCore.Communicators.VkRequest, global::EmailCore.Communicators.VkReply>(serviceImpl.GetVk));
      serviceBinder.AddMethod(__Method_GetEmail, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::EmailCore.Communicators.EmailRequest, global::EmailCore.Communicators.EmailReply>(serviceImpl.GetEmail));
    }

  }
}
#endregion
